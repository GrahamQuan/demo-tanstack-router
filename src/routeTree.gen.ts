/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as WithFooterRouteImport } from './routes/_with-footer'
import { Route as IndexRouteImport } from './routes/index'
import { Route as WithFooterPostsRouteRouteImport } from './routes/_with-footer/posts/route'
import { Route as WithFooterAboutRouteRouteImport } from './routes/_with-footer/about/route'
import { Route as WithFooterPostsIndexRouteImport } from './routes/_with-footer/posts/index'
import { Route as WithFooterAboutIndexRouteImport } from './routes/_with-footer/about/index'
import { Route as WithFooterPostsIdRouteImport } from './routes/_with-footer/posts/$id'
import { Route as WithFooterAboutIdRouteImport } from './routes/_with-footer/about/$id'

const WithFooterRoute = WithFooterRouteImport.update({
  id: '/_with-footer',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const WithFooterPostsRouteRoute = WithFooterPostsRouteRouteImport.update({
  id: '/posts',
  path: '/posts',
  getParentRoute: () => WithFooterRoute,
} as any)
const WithFooterAboutRouteRoute = WithFooterAboutRouteRouteImport.update({
  id: '/about',
  path: '/about',
  getParentRoute: () => WithFooterRoute,
} as any)
const WithFooterPostsIndexRoute = WithFooterPostsIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => WithFooterPostsRouteRoute,
} as any)
const WithFooterAboutIndexRoute = WithFooterAboutIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => WithFooterAboutRouteRoute,
} as any)
const WithFooterPostsIdRoute = WithFooterPostsIdRouteImport.update({
  id: '/$id',
  path: '/$id',
  getParentRoute: () => WithFooterPostsRouteRoute,
} as any)
const WithFooterAboutIdRoute = WithFooterAboutIdRouteImport.update({
  id: '/$id',
  path: '/$id',
  getParentRoute: () => WithFooterAboutRouteRoute,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/about': typeof WithFooterAboutRouteRouteWithChildren
  '/posts': typeof WithFooterPostsRouteRouteWithChildren
  '/about/$id': typeof WithFooterAboutIdRoute
  '/posts/$id': typeof WithFooterPostsIdRoute
  '/about/': typeof WithFooterAboutIndexRoute
  '/posts/': typeof WithFooterPostsIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/about/$id': typeof WithFooterAboutIdRoute
  '/posts/$id': typeof WithFooterPostsIdRoute
  '/about': typeof WithFooterAboutIndexRoute
  '/posts': typeof WithFooterPostsIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/_with-footer': typeof WithFooterRouteWithChildren
  '/_with-footer/about': typeof WithFooterAboutRouteRouteWithChildren
  '/_with-footer/posts': typeof WithFooterPostsRouteRouteWithChildren
  '/_with-footer/about/$id': typeof WithFooterAboutIdRoute
  '/_with-footer/posts/$id': typeof WithFooterPostsIdRoute
  '/_with-footer/about/': typeof WithFooterAboutIndexRoute
  '/_with-footer/posts/': typeof WithFooterPostsIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/about'
    | '/posts'
    | '/about/$id'
    | '/posts/$id'
    | '/about/'
    | '/posts/'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/about/$id' | '/posts/$id' | '/about' | '/posts'
  id:
    | '__root__'
    | '/'
    | '/_with-footer'
    | '/_with-footer/about'
    | '/_with-footer/posts'
    | '/_with-footer/about/$id'
    | '/_with-footer/posts/$id'
    | '/_with-footer/about/'
    | '/_with-footer/posts/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  WithFooterRoute: typeof WithFooterRouteWithChildren
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_with-footer': {
      id: '/_with-footer'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof WithFooterRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_with-footer/posts': {
      id: '/_with-footer/posts'
      path: '/posts'
      fullPath: '/posts'
      preLoaderRoute: typeof WithFooterPostsRouteRouteImport
      parentRoute: typeof WithFooterRoute
    }
    '/_with-footer/about': {
      id: '/_with-footer/about'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof WithFooterAboutRouteRouteImport
      parentRoute: typeof WithFooterRoute
    }
    '/_with-footer/posts/': {
      id: '/_with-footer/posts/'
      path: '/'
      fullPath: '/posts/'
      preLoaderRoute: typeof WithFooterPostsIndexRouteImport
      parentRoute: typeof WithFooterPostsRouteRoute
    }
    '/_with-footer/about/': {
      id: '/_with-footer/about/'
      path: '/'
      fullPath: '/about/'
      preLoaderRoute: typeof WithFooterAboutIndexRouteImport
      parentRoute: typeof WithFooterAboutRouteRoute
    }
    '/_with-footer/posts/$id': {
      id: '/_with-footer/posts/$id'
      path: '/$id'
      fullPath: '/posts/$id'
      preLoaderRoute: typeof WithFooterPostsIdRouteImport
      parentRoute: typeof WithFooterPostsRouteRoute
    }
    '/_with-footer/about/$id': {
      id: '/_with-footer/about/$id'
      path: '/$id'
      fullPath: '/about/$id'
      preLoaderRoute: typeof WithFooterAboutIdRouteImport
      parentRoute: typeof WithFooterAboutRouteRoute
    }
  }
}

interface WithFooterAboutRouteRouteChildren {
  WithFooterAboutIdRoute: typeof WithFooterAboutIdRoute
  WithFooterAboutIndexRoute: typeof WithFooterAboutIndexRoute
}

const WithFooterAboutRouteRouteChildren: WithFooterAboutRouteRouteChildren = {
  WithFooterAboutIdRoute: WithFooterAboutIdRoute,
  WithFooterAboutIndexRoute: WithFooterAboutIndexRoute,
}

const WithFooterAboutRouteRouteWithChildren =
  WithFooterAboutRouteRoute._addFileChildren(WithFooterAboutRouteRouteChildren)

interface WithFooterPostsRouteRouteChildren {
  WithFooterPostsIdRoute: typeof WithFooterPostsIdRoute
  WithFooterPostsIndexRoute: typeof WithFooterPostsIndexRoute
}

const WithFooterPostsRouteRouteChildren: WithFooterPostsRouteRouteChildren = {
  WithFooterPostsIdRoute: WithFooterPostsIdRoute,
  WithFooterPostsIndexRoute: WithFooterPostsIndexRoute,
}

const WithFooterPostsRouteRouteWithChildren =
  WithFooterPostsRouteRoute._addFileChildren(WithFooterPostsRouteRouteChildren)

interface WithFooterRouteChildren {
  WithFooterAboutRouteRoute: typeof WithFooterAboutRouteRouteWithChildren
  WithFooterPostsRouteRoute: typeof WithFooterPostsRouteRouteWithChildren
}

const WithFooterRouteChildren: WithFooterRouteChildren = {
  WithFooterAboutRouteRoute: WithFooterAboutRouteRouteWithChildren,
  WithFooterPostsRouteRoute: WithFooterPostsRouteRouteWithChildren,
}

const WithFooterRouteWithChildren = WithFooterRoute._addFileChildren(
  WithFooterRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  WithFooterRoute: WithFooterRouteWithChildren,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
